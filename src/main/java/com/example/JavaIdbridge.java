package com.example;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Scanner;

import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;

class JavaIdbridge {

	public static void main(String[] args) throws IOException, UnirestException {
		plainHttp();
        //unirest();
	}

    public static void plainHttp() throws IOException{
        URL url = new URL("https://idbridge-a.liveperson.net/api/account/80169848/unauth/resp/stateredirector");
		HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();
		httpConn.setRequestMethod("POST");

		httpConn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");

		httpConn.setDoOutput(true);
		OutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());
		//writer.write("SAMLResponse=PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbHA6UmVzcG9uc2UgeG1sbnM6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgeG1sbnM6c2FtbHA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgVmVyc2lvbj0iMi4wIj48c2FtbDpBc3NlcnRpb24geG1sbnM6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9InprdWdJTmdibVlfbzlMT2RvYldrYzVZQWZGTiIgSXNzdWVJbnN0YW50PSIyMDIyLTEyLTE1VDE1OjEyOjEzLjAxOVoiIFZlcnNpb249IjIuMCI%2BPHNhbWw6SXNzdWVyPmh0dHBzOi8vcGluZ2ZlZGVyYXRlLnBhdC50ZC5jb206OTAzMTwvc2FtbDpJc3N1ZXI%2BPGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BPGRzOlNpZ25lZEluZm8%2BPGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxkc2lnLW1vcmUjcnNhLXNoYTI1NiIvPjxkczpSZWZlcmVuY2UgVVJJPSIjemt1Z0lOZ2JtWV9vOUxPZG9iV2tjNVlBZkZOIj48ZHM6VHJhbnNmb3Jtcz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8%2BPC9kczpUcmFuc2Zvcm1zPjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz48ZHM6RGlnZXN0VmFsdWU%2BaE9NcEQ3RTE5bnhiQ3JVdHRqSWZYZzF6S0lpYnZkZ2EwWUFFbWVSWTh1bz08L2RzOkRpZ2VzdFZhbHVlPjwvZHM6UmVmZXJlbmNlPjwvZHM6U2lnbmVkSW5mbz48ZHM6U2lnbmF0dXJlVmFsdWU%2BYnF4U2VPWFIyczlBbjkzblRaZ01PV090citMZE8wYk5QbzhTSnBKdm1KOTFQa1VLWDdncG8wVjJTYjRBeEJtRkpRMnAydzI0MmdpZlRvTnJBS1BuVHgvWDBlQXkvSTQvMFFibGJTRTJoT0pUUnphUkcySkR1RkgrTWNRd0I3SHJpbFFhRHZtZC9FNUg1SmV0eVh5QnZwWGxORzFMTnJsaFdJZ1hmUXEyMW1UU1VOaUNvbzJpNkJ0VkNjWUtucmVkQ2hFaEVnM3RtbVlSdHhDU3Bza05TT3d2dmlpNG9iVUNsMGZnWDZXcDV0Vm1hNGFMUytlZVp5dExqTzZCMGxZeFRGVTRPdHo5TzIwMUFCcWRGRnNORkptZWRWT2c1c3NIMDFkNThKNlVZSTlZRXlHRWVJaXlMNWtMazEvQUxxNm1CTUI4NmxJaC9HZk1QRWpkU05HTWlnPT08L2RzOlNpZ25hdHVyZVZhbHVlPjxkczpLZXlJbmZvPjxkczpYNTA5RGF0YT48ZHM6WDUwOUNlcnRpZmljYXRlPk1JSUhrakNDQlhxZ0F3SUJBZ0lUU3dBRFViM29XRUpQZ1lhU293QUJBQU5SdlRBTkJna3Foa2lHOXcwQkFRc0ZBREJLTVJNd0VRWUtDWkltaVpQeUxHUUJHUllEWTI5dE1SY3dGUVlLQ1pJbWlaUHlMR1FCR1JZSGNDMTBaR0ptWnpFYU1CZ0dBMVVFQXd3UlZFUkpjM04xYVc1bk1ERkRRVjlRWVhRd0hoY05NakV4TWpJNU1UUXpNekl5V2hjTk1qTXhNakk1TVRRek16SXlXakNCa3pFTE1Ba0dBMVVFQmhNQ1EwRXhFREFPQmdOVkJBZ1RCMDl1ZEdGeWFXOHhFREFPQmdOVkJBY1RCMVJ2Y205dWRHOHhJakFnQmdOVkJBb1RHVlJvWlNCVWIzSnZiblJ2TFVSdmJXbHVhVzl1SUVKaGJtc3hFREFPQmdOVkJBc1RCMlZDVTFOVVNWTXhLakFvQmdOVkJBTVRJWEJoZEM1alptVmtaR2xuYVhSaGJITnBaMjVwYm1kalpYSjBMblJrTG1OdmJUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUt5VUNON0VUWGs2WHVvWUg5MGdURWJiMm4vcDdLOU9SMjRSZmwzc0ZkT2lpV0hkMHZIOWhiMnN4S2NqbnIzeDN4MkRvd1MreXJKaFd5RTdLdkt2YVhnaFlyUlB5MCtWUk1zUFZSOEg5Ymg4ZmZBdjlLUzhuYUlwYVZDZjcyYTliYmRWeEF5aVh4Y3ZHSGE0RS96b1BIOG5xNW0zREIwT3BPcGRaNER2bVhkU0JpOXBjTmpJZzFGWHJoSmNkb1MyaDY3RkN5S3Y4VWovdy9RMzNUWlhNanhhRGorckhhdHIvR0ZtcHFpNzkyWjRvUzhWR0pwSWxNczZFRGw3ZDdUM29PbWw1ZFl3OFo2eFJTTW40cHdwNVFXdS9keDFIVldndXhIWnRtZms4K1hVcThQZ21ZN243d1QrYU5JdkY4blJPYSswNGwyU3BxRnF4UnhWL0NneUtlVUNBd0VBQWFPQ0F5VXdnZ01oTUN3R0ExVWRFUVFsTUNPQ0lYQmhkQzVqWm1Wa1pHbG5hWFJoYkhOcFoyNXBibWRqWlhKMExuUmtMbU52YlRBZEJnTlZIUTRFRmdRVWZDSzBBYkFGaXcxWTBEUWRpb1VUR0xXb2NKMHdId1lEVlIwakJCZ3dGb0FVVDJoanpnamkwSWNaaFdvNlZHSm1TTGVzUnhFd2dmY0dBMVVkSHdTQjd6Q0I3RENCNmFDQjVxQ0I0NFl5YUhSMGNEb3ZMM0JyYVMxalpIQXVkR1JpWVc1ckxtTmhMM0JyYVM5VVJFbHpjM1ZwYm1jd01VTkJYMUJoZEM1amNteUdnYXhzWkdGd09pOHZMME5PUFZSRVNYTnpkV2x1WnpBeFEwRmZVR0YwTEVOT1BVTkVVQ3hEVGoxUWRXSnNhV01sTWpCTFpYa2xNakJUWlhKMmFXTmxjeXhEVGoxVFpYSjJhV05sY3l4RFRqMURiMjVtYVdkMWNtRjBhVzl1TEVSRFBYQXRabWtzUkVNOWJHOWpZV3cvWTJWeWRHbG1hV05oZEdWU1pYWnZZMkYwYVc5dVRHbHpkRDlpWVhObFAyOWlhbVZqZEVOc1lYTnpQV05TVEVScGMzUnlhV0oxZEdsdmJsQnZhVzUwTUlJQklnWUlLd1lCQlFVSEFRRUVnZ0VVTUlJQkVEQ0Jyd1lJS3dZQkJRVUhNQUtHZ2FKc1pHRndPaTh2TDBOT1BWUkVTWE56ZFdsdVp6QXhRMEZmVUdGMExFTk9QVUZKUVN4RFRqMVFkV0pzYVdNbE1qQkxaWGtsTWpCVFpYSjJhV05sY3l4RFRqMVRaWEoyYVdObGN5eERUajFEYjI1bWFXZDFjbUYwYVc5dUxFUkRQWEF0Wm1rc1JFTTliRzlqWVd3L1kwRkRaWEowYVdacFkyRjBaVDlpWVhObFAyOWlhbVZqZEVOc1lYTnpQV05sY25ScFptbGpZWFJwYjI1QmRYUm9iM0pwZEhrd1hBWUlLd1lCQlFVSE1BS0dVR2gwZEhBNkx5OXdhMmt0WTJSd0xuUmtZbUZ1YXk1allTOXdhMmt2UTFKQlFVRldRa014TVUxVFEwRXVjQzEwWkdKbVp5NWpiMjFmVkVSSmMzTjFhVzVuTURGRFFWOVFZWFFvTVNrdVkzSjBNQXNHQTFVZER3UUVBd0lGb0RBOEJna3JCZ0VFQVlJM0ZRY0VMekF0QmlVckJnRUVBWUkzRlFpQzNkOS9oZjNoUVlYZG5TQ0VoYUJOeE40elhvV1R0MDJEbHY0K0FnRmtBZ0VLTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQ0JnZ3JCZ0VGQlFjREFUQW5CZ2tyQmdFRUFZSTNGUW9FR2pBWU1Bb0dDQ3NHQVFVRkJ3TUNNQW9HQ0NzR0FRVUZCd01CTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFDeStaVkZZR3FaaEF2dU1YTktGMTdrSmo3MHVWdTJnQ3FWMEZod1Q3RFU0UldzVzhWRVVZUTRCdFBwNEtKNVJsQmd3RDNqeSs1cy9YZGdjU0VrZ1MwTzE5MDFoZ29xUzBpejVMMG91Mnl0WHI2TURKcUJadm5TZE9EbmFZVnFpYTB3ZHp5U1VpUVBJL1V3SWF0dGw1Qy9nemFxUHJjTlVKVVc1eFZFTytaSzhKajFuaHhrNGdhclhhL3Z2VitLSi9uNnFPS1VWeG9HaEpSS3M3QTF3Vk9Bb3pMbkxITlVZTmFKNUE1ZXNDZDBUelMyZ0hOb25DdDMvVGNCWUJMVTdmTWV0ZUlFekZSS0x6T0I0Ni9MMzJFZzZ6TE9TazFDSU4weXRuVXp1RnpYMlJyZGJFWWpMWTRDNkZUR0xobzhlU1hpWTRQMjNEaXBOakNIYlpJYlBvZytHdDNkNXhrZGRUdDE2MVpiYXBlQXYvUTBoa1M3OTNvU2R4aTdiWnlzUDBCQzVtK0hnQnZJRjZjNUhINjJ4a1JNaUpNaTlzQUZFOFBRUUVENjJjQ3JiNThJSlZhWElrWlFKSVRsaUdVbFQ2WVp5R3RYVkw1NUZEa3NacnpnN1Z1cHFiWW14bGlsd1JJNkpwNWJhSDJjaDYrRWlpSVphTkVQNHlIU2VhYW5BRHQrOE5PS2dINTd1TnhwUS9EQkQ5cHNLZ09DYWdrSDF5WGRKUGU3aEM4WkF6OXZxTlpvbmM4ZDhNdjk1R0RtenBIQnpwS25xZVNTSmdkV3ZQcFUza0dBcHF4Uy9NQkJFODNzMFo5QlJZT3lYakVhL3dHT3N0eHhWMS9kRCsvZXQ2cUxueGZFUFY0RVpxMW82V3dpQ2E2aE5QWjA4NVQ2eEk2ZUtRblBXTldhMkE9PTwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE%2BPC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1sOlN1YmplY3Q%2BPHNhbWw6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPjRlMzFhMjk2LTJmYmMtNGY5YS05ZTZiLTMzYjJjZTE1MGYxZTwvc2FtbDpOYW1lSUQ%2BPHNhbWw6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpiZWFyZXIiLz48L3NhbWw6U3ViamVjdD48c2FtbDpDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAyMi0xMi0xNVQxNTowNzoxMy4wMTlaIiBOb3RPbk9yQWZ0ZXI9IjIwMjItMTItMTVUMTU6NDI6MTMuMDE5WiI%2BPHNhbWw6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDpBdWRpZW5jZT5hY3RpdmV0cmFkZXItd3Mtc3RzLXBhdDwvc2FtbDpBdWRpZW5jZT48L3NhbWw6QXVkaWVuY2VSZXN0cmljdGlvbj48L3NhbWw6Q29uZGl0aW9ucz48c2FtbDpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMjItMTItMTVUMTU6MTI6MTMuMDE5WiIgU2Vzc2lvbkluZGV4PSJ6a3VnSU5nYm1ZX285TE9kb2JXa2M1WUFmRk4iPjxzYW1sOkF1dGhuQ29udGV4dD48c2FtbDpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3Nlczp1bnNwZWNpZmllZDwvc2FtbDpBdXRobkNvbnRleHRDbGFzc1JlZj48L3NhbWw6QXV0aG5Db250ZXh0Pjwvc2FtbDpBdXRoblN0YXRlbWVudD48c2FtbDpBdHRyaWJ1dGVTdGF0ZW1lbnQ%2BPHNhbWw6QXR0cmlidXRlIE5hbWU9ImlkZW50aWZpZXIiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI%2BRjE2MDJIRTEySFZCTDdVMU5BTUI4QVhTQTwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT48L3NhbWw6QXR0cmlidXRlPjxzYW1sOkF0dHJpYnV0ZSBOYW1lPSJnaXZlbk5hbWUiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI%2BR0FMTFVTPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU%2BPC9zYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWw6QXNzZXJ0aW9uPjwvc2FtbHA6UmVzcG9uc2U%2B&RelayState=https%3A%2F%2Ftd.com");
        writer.write("SAMLResponse=PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbHA6UmVzcG9uc2UgeG1sbnM6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgeG1sbnM6c2FtbHA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgVmVyc2lvbj0iMi4wIj48c2FtbDpBc3NlcnRpb24geG1sbnM6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9InprdWdJTmdibVlfbzlMT2RvYldrYzVZQWZGTiIgSXNzdWVJbnN0YW50PSIyMDIyLTEyLTE1VDE1OjEyOjEzLjAxOVoiIFZlcnNpb249IjIuMCI%2BPHNhbWw6SXNzdWVyPmh0dHBzOi8vcGluZ2ZlZGVyYXRlLnBhdC50ZC5jb206OTAzMTwvc2FtbDpJc3N1ZXI%2BPGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI%2BPGRzOlNpZ25lZEluZm8%2BPGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxkc2lnLW1vcmUjcnNhLXNoYTI1NiIvPjxkczpSZWZlcmVuY2UgVVJJPSIjemt1Z0lOZ2JtWV9vOUxPZG9iV2tjNVlBZkZOIj48ZHM6VHJhbnNmb3Jtcz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8%2BPC9kczpUcmFuc2Zvcm1zPjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz48ZHM6RGlnZXN0VmFsdWU%2BaE9NcEQ3RTE5bnhiQ3JVdHRqSWZYZzF6S0lpYnZkZ2EwWUFFbWVSWTh1bz08L2RzOkRpZ2VzdFZhbHVlPjwvZHM6UmVmZXJlbmNlPjwvZHM6U2lnbmVkSW5mbz48ZHM6U2lnbmF0dXJlVmFsdWU%2BYnF4U2VPWFIyczlBbjkzblRaZ01PV090citMZE8wYk5QbzhTSnBKdm1KOTFQa1VLWDdncG8wVjJTYjRBeEJtRkpRMnAydzI0MmdpZlRvTnJBS1BuVHgvWDBlQXkvSTQvMFFibGJTRTJoT0pUUnphUkcySkR1RkgrTWNRd0I3SHJpbFFhRHZtZC9FNUg1SmV0eVh5QnZwWGxORzFMTnJsaFdJZ1hmUXEyMW1UU1VOaUNvbzJpNkJ0VkNjWUtucmVkQ2hFaEVnM3RtbVlSdHhDU3Bza05TT3d2dmlpNG9iVUNsMGZnWDZXcDV0Vm1hNGFMUytlZVp5dExqTzZCMGxZeFRGVTRPdHo5TzIwMUFCcWRGRnNORkptZWRWT2c1c3NIMDFkNThKNlVZSTlZRXlHRWVJaXlMNWtMazEvQUxxNm1CTUI4NmxJaC9HZk1QRWpkU05HTWlnPT08L2RzOlNpZ25hdHVyZVZhbHVlPjxkczpLZXlJbmZvPjxkczpYNTA5RGF0YT48ZHM6WDUwOUNlcnRpZmljYXRlPk1JSUhrakNDQlhxZ0F3SUJBZ0lUU3dBRFViM29XRUpQZ1lhU293QUJBQU5SdlRBTkJna3Foa2lHOXcwQkFRc0ZBREJLTVJNd0VRWUtDWkltaVpQeUxHUUJHUllEWTI5dE1SY3dGUVlLQ1pJbWlaUHlMR1FCR1JZSGNDMTBaR0ptWnpFYU1CZ0dBMVVFQXd3UlZFUkpjM04xYVc1bk1ERkRRVjlRWVhRd0hoY05NakV4TWpJNU1UUXpNekl5V2hjTk1qTXhNakk1TVRRek16SXlXakNCa3pFTE1Ba0dBMVVFQmhNQ1EwRXhFREFPQmdOVkJBZ1RCMDl1ZEdGeWFXOHhFREFPQmdOVkJBY1RCMVJ2Y205dWRHOHhJakFnQmdOVkJBb1RHVlJvWlNCVWIzSnZiblJ2TFVSdmJXbHVhVzl1SUVKaGJtc3hFREFPQmdOVkJBc1RCMlZDVTFOVVNWTXhLakFvQmdOVkJBTVRJWEJoZEM1alptVmtaR2xuYVhSaGJITnBaMjVwYm1kalpYSjBMblJrTG1OdmJUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUt5VUNON0VUWGs2WHVvWUg5MGdURWJiMm4vcDdLOU9SMjRSZmwzc0ZkT2lpV0hkMHZIOWhiMnN4S2NqbnIzeDN4MkRvd1MreXJKaFd5RTdLdkt2YVhnaFlyUlB5MCtWUk1zUFZSOEg5Ymg4ZmZBdjlLUzhuYUlwYVZDZjcyYTliYmRWeEF5aVh4Y3ZHSGE0RS96b1BIOG5xNW0zREIwT3BPcGRaNER2bVhkU0JpOXBjTmpJZzFGWHJoSmNkb1MyaDY3RkN5S3Y4VWovdy9RMzNUWlhNanhhRGorckhhdHIvR0ZtcHFpNzkyWjRvUzhWR0pwSWxNczZFRGw3ZDdUM29PbWw1ZFl3OFo2eFJTTW40cHdwNVFXdS9keDFIVldndXhIWnRtZms4K1hVcThQZ21ZN243d1QrYU5JdkY4blJPYSswNGwyU3BxRnF4UnhWL0NneUtlVUNBd0VBQWFPQ0F5VXdnZ01oTUN3R0ExVWRFUVFsTUNPQ0lYQmhkQzVqWm1Wa1pHbG5hWFJoYkhOcFoyNXBibWRqWlhKMExuUmtMbU52YlRBZEJnTlZIUTRFRmdRVWZDSzBBYkFGaXcxWTBEUWRpb1VUR0xXb2NKMHdId1lEVlIwakJCZ3dGb0FVVDJoanpnamkwSWNaaFdvNlZHSm1TTGVzUnhFd2dmY0dBMVVkSHdTQjd6Q0I3RENCNmFDQjVxQ0I0NFl5YUhSMGNEb3ZMM0JyYVMxalpIQXVkR1JpWVc1ckxtTmhMM0JyYVM5VVJFbHpjM1ZwYm1jd01VTkJYMUJoZEM1amNteUdnYXhzWkdGd09pOHZMME5PUFZSRVNYTnpkV2x1WnpBeFEwRmZVR0YwTEVOT1BVTkVVQ3hEVGoxUWRXSnNhV01sTWpCTFpYa2xNakJUWlhKMmFXTmxjeXhEVGoxVFpYSjJhV05sY3l4RFRqMURiMjVtYVdkMWNtRjBhVzl1TEVSRFBYQXRabWtzUkVNOWJHOWpZV3cvWTJWeWRHbG1hV05oZEdWU1pYWnZZMkYwYVc5dVRHbHpkRDlpWVhObFAyOWlhbVZqZEVOc1lYTnpQV05TVEVScGMzUnlhV0oxZEdsdmJsQnZhVzUwTUlJQklnWUlLd1lCQlFVSEFRRUVnZ0VVTUlJQkVEQ0Jyd1lJS3dZQkJRVUhNQUtHZ2FKc1pHRndPaTh2TDBOT1BWUkVTWE56ZFdsdVp6QXhRMEZmVUdGMExFTk9QVUZKUVN4RFRqMVFkV0pzYVdNbE1qQkxaWGtsTWpCVFpYSjJhV05sY3l4RFRqMVRaWEoyYVdObGN5eERUajFEYjI1bWFXZDFjbUYwYVc5dUxFUkRQWEF0Wm1rc1JFTTliRzlqWVd3L1kwRkRaWEowYVdacFkyRjBaVDlpWVhObFAyOWlhbVZqZEVOc1lYTnpQV05sY25ScFptbGpZWFJwYjI1QmRYUm9iM0pwZEhrd1hBWUlLd1lCQlFVSE1BS0dVR2gwZEhBNkx5OXdhMmt0WTJSd0xuUmtZbUZ1YXk1allTOXdhMmt2UTFKQlFVRldRa014TVUxVFEwRXVjQzEwWkdKbVp5NWpiMjFmVkVSSmMzTjFhVzVuTURGRFFWOVFZWFFvTVNrdVkzSjBNQXNHQTFVZER3UUVBd0lGb0RBOEJna3JCZ0VFQVlJM0ZRY0VMekF0QmlVckJnRUVBWUkzRlFpQzNkOS9oZjNoUVlYZG5TQ0VoYUJOeE40elhvV1R0MDJEbHY0K0FnRmtBZ0VLTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQ0JnZ3JCZ0VGQlFjREFUQW5CZ2tyQmdFRUFZSTNGUW9FR2pBWU1Bb0dDQ3NHQVFVRkJ3TUNNQW9HQ0NzR0FRVUZCd01CTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFDeStaVkZZR3FaaEF2dU1YTktGMTdrSmo3MHVWdTJnQ3FWMEZod1Q3RFU0UldzVzhWRVVZUTRCdFBwNEtKNVJsQmd3RDNqeSs1cy9YZGdjU0VrZ1MwTzE5MDFoZ29xUzBpejVMMG91Mnl0WHI2TURKcUJadm5TZE9EbmFZVnFpYTB3ZHp5U1VpUVBJL1V3SWF0dGw1Qy9nemFxUHJjTlVKVVc1eFZFTytaSzhKajFuaHhrNGdhclhhL3Z2VitLSi9uNnFPS1VWeG9HaEpSS3M3QTF3Vk9Bb3pMbkxITlVZTmFKNUE1ZXNDZDBUelMyZ0hOb25DdDMvVGNCWUJMVTdmTWV0ZUlFekZSS0x6T0I0Ni9MMzJFZzZ6TE9TazFDSU4weXRuVXp1RnpYMlJyZGJFWWpMWTRDNkZUR0xobzhlU1hpWTRQMjNEaXBOakNIYlpJYlBvZytHdDNkNXhrZGRUdDE2MVpiYXBlQXYvUTBoa1M3OTNvU2R4aTdiWnlzUDBCQzVtK0hnQnZJRjZjNUhINjJ4a1JNaUpNaTlzQUZFOFBRUUVENjJjQ3JiNThJSlZhWElrWlFKSVRsaUdVbFQ2WVp5R3RYVkw1NUZEa3NacnpnN1Z1cHFiWW14bGlsd1JJNkpwNWJhSDJjaDYrRWlpSVphTkVQNHlIU2VhYW5BRHQrOE5PS2dINTd1TnhwUS9EQkQ5cHNLZ09DYWdrSDF5WGRKUGU3aEM4WkF6OXZxTlpvbmM4ZDhNdjk1R0RtenBIQnpwS25xZVNTSmdkV3ZQcFUza0dBcHF4Uy9NQkJFODNzMFo5QlJZT3lYakVhL3dHT3N0eHhWMS9kRCsvZXQ2cUxueGZFUFY0RVpxMW82V3dpQ2E2aE5QWjA4NVQ2eEk2ZUtRblBXTldhMkE9PTwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE%2BPC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1sOlN1YmplY3Q%2BPHNhbWw6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPjRlMzFhMjk2LTJmYmMtNGY5YS05ZTZiLTMzYjJjZTE1MGYxZTwvc2FtbDpOYW1lSUQ%2BPHNhbWw6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpiZWFyZXIiLz48L3NhbWw6U3ViamVjdD48c2FtbDpDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAyMi0xMi0xNVQxNTowNzoxMy4wMTlaIiBOb3RPbk9yQWZ0ZXI9IjIwMjItMTItMTVUMTU6NDI6MTMuMDE5WiI%2BPHNhbWw6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDpBdWRpZW5jZT5hY3RpdmV0cmFkZXItd3Mtc3RzLXBhdDwvc2FtbDpBdWRpZW5jZT48L3NhbWw6QXVkaWVuY2VSZXN0cmljdGlvbj48L3NhbWw6Q29uZGl0aW9ucz48c2FtbDpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMjItMTItMTVUMTU6MTI6MTMuMDE5WiIgU2Vzc2lvbkluZGV4PSJ6a3VnSU5nYm1ZX285TE9kb2JXa2M1WUFmRk4iPjxzYW1sOkF1dGhuQ29udGV4dD48c2FtbDpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3Nlczp1bnNwZWNpZmllZDwvc2FtbDpBdXRobkNvbnRleHRDbGFzc1JlZj48L3NhbWw6QXV0aG5Db250ZXh0Pjwvc2FtbDpBdXRoblN0YXRlbWVudD48c2FtbDpBdHRyaWJ1dGVTdGF0ZW1lbnQ%2BPHNhbWw6QXR0cmlidXRlIE5hbWU9ImlkZW50aWZpZXIiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI%2BRjE2MDJIRTEySFZCTDdVMU5BTUI4QVhTQTwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT48L3NhbWw6QXR0cmlidXRlPjxzYW1sOkF0dHJpYnV0ZSBOYW1lPSJnaXZlbk5hbWUiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI%2BR0FMTFVTPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU%2BPC9zYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWw6QXNzZXJ0aW9uPjwvc2FtbHA6UmVzcG9uc2U%2B&RelayState=aHR0cDovL2xvY2FsaG9zdDo1NTAwL2lkY2FsbGJhY2suaHRtbA==");
		writer.flush();
		writer.close();
		httpConn.getOutputStream().close();

        System.out.println(httpConn.getResponseCode());
        System.out.println(httpConn.getHeaderField("Location"));
        
		InputStream responseStream = httpConn.getResponseCode() / 100 == 2
				? httpConn.getInputStream()
				: httpConn.getErrorStream();
		Scanner s = new Scanner(responseStream).useDelimiter("\\A");
		String response = s.hasNext() ? s.next() : "";
		System.out.println(response);
    }

    public static void redirect(){
        try {

            String url = "http://www.twitter.com";
        
            URL obj = new URL(url);
            HttpURLConnection conn = (HttpURLConnection) obj.openConnection();
            conn.setReadTimeout(5000);
            conn.addRequestProperty("Accept-Language", "en-US,en;q=0.8");
            conn.addRequestProperty("User-Agent", "Mozilla");
            conn.addRequestProperty("Referer", "google.com");
        
            System.out.println("Request URL ... " + url);
        
            boolean redirect = false;
        
            // normally, 3xx is redirect
            int status = conn.getResponseCode();
            if (status != HttpURLConnection.HTTP_OK) {
                if (status == HttpURLConnection.HTTP_MOVED_TEMP
                    || status == HttpURLConnection.HTTP_MOVED_PERM
                        || status == HttpURLConnection.HTTP_SEE_OTHER)
                redirect = true;
            }
        
            System.out.println("Response Code ... " + status);
        
            if (redirect) {
        
                // get redirect url from "location" header field
                String newUrl = conn.getHeaderField("Location");
        
                // get the cookie if need, for login
                String cookies = conn.getHeaderField("Set-Cookie");
        
                // open the new connnection again
                conn = (HttpURLConnection) new URL(newUrl).openConnection();
                conn.setRequestProperty("Cookie", cookies);
                conn.addRequestProperty("Accept-Language", "en-US,en;q=0.8");
                conn.addRequestProperty("User-Agent", "Mozilla");
                conn.addRequestProperty("Referer", "google.com");
                                        
                System.out.println("Redirect to URL : " + newUrl);
        
            }
        
            BufferedReader in = new BufferedReader(
                                      new InputStreamReader(conn.getInputStream()));
            String inputLine;
            StringBuffer html = new StringBuffer();
        
            while ((inputLine = in.readLine()) != null) {
                html.append(inputLine);
            }
            in.close();
        
            System.out.println("URL Content... \n" + html.toString());
            System.out.println("Done");
        
            } catch (Exception e) {
            e.printStackTrace();
            }
    }

    public static void unirest() throws UnirestException{
        Unirest.setTimeouts(0, 0);
        HttpResponse<String> response = Unirest
                .post("https://idbridge-a.liveperson.net/api/account/80169848/unauth/resp/stateredirector?version=2.0")
                // .header("Content-Type", "application/x-www-form-urlencoded")
                .field("SAMLResponse",
                        "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbHA6UmVzcG9uc2UgeG1sbnM6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgeG1sbnM6c2FtbHA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgVmVyc2lvbj0iMi4wIj48c2FtbDpBc3NlcnRpb24geG1sbnM6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiIgSUQ9InprdWdJTmdibVlfbzlMT2RvYldrYzVZQWZGTiIgSXNzdWVJbnN0YW50PSIyMDIyLTEyLTE1VDE1OjEyOjEzLjAxOVoiIFZlcnNpb249IjIuMCI+PHNhbWw6SXNzdWVyPmh0dHBzOi8vcGluZ2ZlZGVyYXRlLnBhdC50ZC5jb206OTAzMTwvc2FtbDpJc3N1ZXI+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PGRzOlNpZ25lZEluZm8+PGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxkc2lnLW1vcmUjcnNhLXNoYTI1NiIvPjxkczpSZWZlcmVuY2UgVVJJPSIjemt1Z0lOZ2JtWV9vOUxPZG9iV2tjNVlBZkZOIj48ZHM6VHJhbnNmb3Jtcz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz48ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+PC9kczpUcmFuc2Zvcm1zPjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz48ZHM6RGlnZXN0VmFsdWU+aE9NcEQ3RTE5bnhiQ3JVdHRqSWZYZzF6S0lpYnZkZ2EwWUFFbWVSWTh1bz08L2RzOkRpZ2VzdFZhbHVlPjwvZHM6UmVmZXJlbmNlPjwvZHM6U2lnbmVkSW5mbz48ZHM6U2lnbmF0dXJlVmFsdWU+YnF4U2VPWFIyczlBbjkzblRaZ01PV090citMZE8wYk5QbzhTSnBKdm1KOTFQa1VLWDdncG8wVjJTYjRBeEJtRkpRMnAydzI0MmdpZlRvTnJBS1BuVHgvWDBlQXkvSTQvMFFibGJTRTJoT0pUUnphUkcySkR1RkgrTWNRd0I3SHJpbFFhRHZtZC9FNUg1SmV0eVh5QnZwWGxORzFMTnJsaFdJZ1hmUXEyMW1UU1VOaUNvbzJpNkJ0VkNjWUtucmVkQ2hFaEVnM3RtbVlSdHhDU3Bza05TT3d2dmlpNG9iVUNsMGZnWDZXcDV0Vm1hNGFMUytlZVp5dExqTzZCMGxZeFRGVTRPdHo5TzIwMUFCcWRGRnNORkptZWRWT2c1c3NIMDFkNThKNlVZSTlZRXlHRWVJaXlMNWtMazEvQUxxNm1CTUI4NmxJaC9HZk1QRWpkU05HTWlnPT08L2RzOlNpZ25hdHVyZVZhbHVlPjxkczpLZXlJbmZvPjxkczpYNTA5RGF0YT48ZHM6WDUwOUNlcnRpZmljYXRlPk1JSUhrakNDQlhxZ0F3SUJBZ0lUU3dBRFViM29XRUpQZ1lhU293QUJBQU5SdlRBTkJna3Foa2lHOXcwQkFRc0ZBREJLTVJNd0VRWUtDWkltaVpQeUxHUUJHUllEWTI5dE1SY3dGUVlLQ1pJbWlaUHlMR1FCR1JZSGNDMTBaR0ptWnpFYU1CZ0dBMVVFQXd3UlZFUkpjM04xYVc1bk1ERkRRVjlRWVhRd0hoY05NakV4TWpJNU1UUXpNekl5V2hjTk1qTXhNakk1TVRRek16SXlXakNCa3pFTE1Ba0dBMVVFQmhNQ1EwRXhFREFPQmdOVkJBZ1RCMDl1ZEdGeWFXOHhFREFPQmdOVkJBY1RCMVJ2Y205dWRHOHhJakFnQmdOVkJBb1RHVlJvWlNCVWIzSnZiblJ2TFVSdmJXbHVhVzl1SUVKaGJtc3hFREFPQmdOVkJBc1RCMlZDVTFOVVNWTXhLakFvQmdOVkJBTVRJWEJoZEM1alptVmtaR2xuYVhSaGJITnBaMjVwYm1kalpYSjBMblJrTG1OdmJUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUt5VUNON0VUWGs2WHVvWUg5MGdURWJiMm4vcDdLOU9SMjRSZmwzc0ZkT2lpV0hkMHZIOWhiMnN4S2NqbnIzeDN4MkRvd1MreXJKaFd5RTdLdkt2YVhnaFlyUlB5MCtWUk1zUFZSOEg5Ymg4ZmZBdjlLUzhuYUlwYVZDZjcyYTliYmRWeEF5aVh4Y3ZHSGE0RS96b1BIOG5xNW0zREIwT3BPcGRaNER2bVhkU0JpOXBjTmpJZzFGWHJoSmNkb1MyaDY3RkN5S3Y4VWovdy9RMzNUWlhNanhhRGorckhhdHIvR0ZtcHFpNzkyWjRvUzhWR0pwSWxNczZFRGw3ZDdUM29PbWw1ZFl3OFo2eFJTTW40cHdwNVFXdS9keDFIVldndXhIWnRtZms4K1hVcThQZ21ZN243d1QrYU5JdkY4blJPYSswNGwyU3BxRnF4UnhWL0NneUtlVUNBd0VBQWFPQ0F5VXdnZ01oTUN3R0ExVWRFUVFsTUNPQ0lYQmhkQzVqWm1Wa1pHbG5hWFJoYkhOcFoyNXBibWRqWlhKMExuUmtMbU52YlRBZEJnTlZIUTRFRmdRVWZDSzBBYkFGaXcxWTBEUWRpb1VUR0xXb2NKMHdId1lEVlIwakJCZ3dGb0FVVDJoanpnamkwSWNaaFdvNlZHSm1TTGVzUnhFd2dmY0dBMVVkSHdTQjd6Q0I3RENCNmFDQjVxQ0I0NFl5YUhSMGNEb3ZMM0JyYVMxalpIQXVkR1JpWVc1ckxtTmhMM0JyYVM5VVJFbHpjM1ZwYm1jd01VTkJYMUJoZEM1amNteUdnYXhzWkdGd09pOHZMME5PUFZSRVNYTnpkV2x1WnpBeFEwRmZVR0YwTEVOT1BVTkVVQ3hEVGoxUWRXSnNhV01sTWpCTFpYa2xNakJUWlhKMmFXTmxjeXhEVGoxVFpYSjJhV05sY3l4RFRqMURiMjVtYVdkMWNtRjBhVzl1TEVSRFBYQXRabWtzUkVNOWJHOWpZV3cvWTJWeWRHbG1hV05oZEdWU1pYWnZZMkYwYVc5dVRHbHpkRDlpWVhObFAyOWlhbVZqZEVOc1lYTnpQV05TVEVScGMzUnlhV0oxZEdsdmJsQnZhVzUwTUlJQklnWUlLd1lCQlFVSEFRRUVnZ0VVTUlJQkVEQ0Jyd1lJS3dZQkJRVUhNQUtHZ2FKc1pHRndPaTh2TDBOT1BWUkVTWE56ZFdsdVp6QXhRMEZmVUdGMExFTk9QVUZKUVN4RFRqMVFkV0pzYVdNbE1qQkxaWGtsTWpCVFpYSjJhV05sY3l4RFRqMVRaWEoyYVdObGN5eERUajFEYjI1bWFXZDFjbUYwYVc5dUxFUkRQWEF0Wm1rc1JFTTliRzlqWVd3L1kwRkRaWEowYVdacFkyRjBaVDlpWVhObFAyOWlhbVZqZEVOc1lYTnpQV05sY25ScFptbGpZWFJwYjI1QmRYUm9iM0pwZEhrd1hBWUlLd1lCQlFVSE1BS0dVR2gwZEhBNkx5OXdhMmt0WTJSd0xuUmtZbUZ1YXk1allTOXdhMmt2UTFKQlFVRldRa014TVUxVFEwRXVjQzEwWkdKbVp5NWpiMjFmVkVSSmMzTjFhVzVuTURGRFFWOVFZWFFvTVNrdVkzSjBNQXNHQTFVZER3UUVBd0lGb0RBOEJna3JCZ0VFQVlJM0ZRY0VMekF0QmlVckJnRUVBWUkzRlFpQzNkOS9oZjNoUVlYZG5TQ0VoYUJOeE40elhvV1R0MDJEbHY0K0FnRmtBZ0VLTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQ0JnZ3JCZ0VGQlFjREFUQW5CZ2tyQmdFRUFZSTNGUW9FR2pBWU1Bb0dDQ3NHQVFVRkJ3TUNNQW9HQ0NzR0FRVUZCd01CTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFDeStaVkZZR3FaaEF2dU1YTktGMTdrSmo3MHVWdTJnQ3FWMEZod1Q3RFU0UldzVzhWRVVZUTRCdFBwNEtKNVJsQmd3RDNqeSs1cy9YZGdjU0VrZ1MwTzE5MDFoZ29xUzBpejVMMG91Mnl0WHI2TURKcUJadm5TZE9EbmFZVnFpYTB3ZHp5U1VpUVBJL1V3SWF0dGw1Qy9nemFxUHJjTlVKVVc1eFZFTytaSzhKajFuaHhrNGdhclhhL3Z2VitLSi9uNnFPS1VWeG9HaEpSS3M3QTF3Vk9Bb3pMbkxITlVZTmFKNUE1ZXNDZDBUelMyZ0hOb25DdDMvVGNCWUJMVTdmTWV0ZUlFekZSS0x6T0I0Ni9MMzJFZzZ6TE9TazFDSU4weXRuVXp1RnpYMlJyZGJFWWpMWTRDNkZUR0xobzhlU1hpWTRQMjNEaXBOakNIYlpJYlBvZytHdDNkNXhrZGRUdDE2MVpiYXBlQXYvUTBoa1M3OTNvU2R4aTdiWnlzUDBCQzVtK0hnQnZJRjZjNUhINjJ4a1JNaUpNaTlzQUZFOFBRUUVENjJjQ3JiNThJSlZhWElrWlFKSVRsaUdVbFQ2WVp5R3RYVkw1NUZEa3NacnpnN1Z1cHFiWW14bGlsd1JJNkpwNWJhSDJjaDYrRWlpSVphTkVQNHlIU2VhYW5BRHQrOE5PS2dINTd1TnhwUS9EQkQ5cHNLZ09DYWdrSDF5WGRKUGU3aEM4WkF6OXZxTlpvbmM4ZDhNdjk1R0RtenBIQnpwS25xZVNTSmdkV3ZQcFUza0dBcHF4Uy9NQkJFODNzMFo5QlJZT3lYakVhL3dHT3N0eHhWMS9kRCsvZXQ2cUxueGZFUFY0RVpxMW82V3dpQ2E2aE5QWjA4NVQ2eEk2ZUtRblBXTldhMkE9PTwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE+PC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1sOlN1YmplY3Q+PHNhbWw6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiPjRlMzFhMjk2LTJmYmMtNGY5YS05ZTZiLTMzYjJjZTE1MGYxZTwvc2FtbDpOYW1lSUQ+PHNhbWw6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpiZWFyZXIiLz48L3NhbWw6U3ViamVjdD48c2FtbDpDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAyMi0xMi0xNVQxNTowNzoxMy4wMTlaIiBOb3RPbk9yQWZ0ZXI9IjIwMjItMTItMTVUMTU6NDI6MTMuMDE5WiI+PHNhbWw6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDpBdWRpZW5jZT5hY3RpdmV0cmFkZXItd3Mtc3RzLXBhdDwvc2FtbDpBdWRpZW5jZT48L3NhbWw6QXVkaWVuY2VSZXN0cmljdGlvbj48L3NhbWw6Q29uZGl0aW9ucz48c2FtbDpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMjItMTItMTVUMTU6MTI6MTMuMDE5WiIgU2Vzc2lvbkluZGV4PSJ6a3VnSU5nYm1ZX285TE9kb2JXa2M1WUFmRk4iPjxzYW1sOkF1dGhuQ29udGV4dD48c2FtbDpBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3Nlczp1bnNwZWNpZmllZDwvc2FtbDpBdXRobkNvbnRleHRDbGFzc1JlZj48L3NhbWw6QXV0aG5Db250ZXh0Pjwvc2FtbDpBdXRoblN0YXRlbWVudD48c2FtbDpBdHRyaWJ1dGVTdGF0ZW1lbnQ+PHNhbWw6QXR0cmlidXRlIE5hbWU9ImlkZW50aWZpZXIiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+RjE2MDJIRTEySFZCTDdVMU5BTUI4QVhTQTwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT48L3NhbWw6QXR0cmlidXRlPjxzYW1sOkF0dHJpYnV0ZSBOYW1lPSJnaXZlbk5hbWUiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+R0FMTFVTPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PC9zYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWw6QXNzZXJ0aW9uPjwvc2FtbHA6UmVzcG9uc2U+")
                .field("RelayState", "https://localhost")
                .asString();

        System.out.println(response.getStatus());
    }

}

